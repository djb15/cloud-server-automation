AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  InternetGatewayName:
    Type: String
    Default: ci-cd-gateway
  RouteTableName:
    Type: String
    Default: ci-cd-route-table
  SecurityGroupName:
    Type: String
    Default: jenkins-security
Mappings:
  SubnetConfig:
    VPC:
      CIDR: '10.0.0.0/16'
      Name: 'ci-cd-vpc'
    Subnet:
      CIDR: '10.0.0.0/24'
      Name: 'jenkins-subnet'
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap [SubnetConfig, VPC, CIDR]
      Tags:
      - 
        Key: Name
        Value: !FindInMap [SubnetConfig, VPC, Name]

  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-1a
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap [SubnetConfig, Subnet, CIDR]
      MapPublicIpOnLaunch: true
      Tags:
      - 
        Key: Name
        Value: !FindInMap [SubnetConfig, Subnet, Name]

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - 
        Key: Name
        Value: !Ref 'InternetGatewayName'

  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
      - 
        Key: Name
        Value: !Ref 'RouteTableName'

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet
      RouteTableId: !Ref PublicRouteTable

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Ref 'SecurityGroupName'
      GroupDescription: Access to the Jenkins container
      VpcId: !Ref 'VPC'

  AllowHTTPInbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'SecurityGroup'
      IpProtocol: tcp
      FromPort: '80'
      ToPort: '80'
      CidrIp: 0.0.0.0/0

  AllowHTTPSInbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'SecurityGroup'
      IpProtocol: tcp
      FromPort: '443'
      ToPort: '443'
      CidrIp: 0.0.0.0/0

  StartJenkins:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: jenkins-startup
        S3Key: jenkins-startup.zip
      Description: Starts jenkins server on GitHub trigger
      FunctionName: jenkins-startup
      Handler: jenkins-startup.lambda_function
      MemorySize: 128
      Runtime: python3.7
      Timeout: 120
      Role: !GetAtt LambdaRole.Arn

  StopJenkins:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: jenkins-startup
        S3Key: jenkins-startup.zip
      Description: Stops jenkins
      FunctionName: jenkins-shutdown
      Handler: jenkins-startup.stop_jenkins
      MemorySize: 128
      Runtime: python3.7
      Timeout: 10
      Role: !GetAtt LambdaRole.Arn
  
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
            - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
        Version: 2012-10-17
      Path: /
      Policies:
      - PolicyName: run-jenkins
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: ['ecs:ListTasks', 'ecs:RunTask', 'events:PutRule', 'ec2:DescribeInstances', 'ec2:StopInstances', 'ec2:StartInstances']
            Resource: '*'

  StopLambdaEventPermission:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt StopJenkins.Arn
      Principal: events.amazonaws.com

  StopLambdaEvent:
    Type: AWS::Events::Rule
    Properties: 
      Name: stop-jenkins
      ScheduleExpression: rate(1 hour)
      State: ENABLED
      Targets: 
        - Arn: !GetAtt StopJenkins.Arn
          Id: id-jenkins-stop

  JenkinsCluster:
    Type: AWS::ECS::Cluster
    Properties : 
      ClusterName : ci-cd-cluster

  JenkinsTask:
    Type: AWS::ECS::TaskDefinition
    Properties: 
      ContainerDefinitions: 
        - 
          Name: jenkins
          Image: jenkinsci/blueocean
          Cpu: 800
          Memory: 800
          MountPoints:
          - SourceVolume: docker-volume
            ContainerPath: /var/jenkins_home
          PortMappings:
          - ContainerPort: 8080
            HostPort: 80
      Family: jenkins-task
      NetworkMode: bridge
      RequiresCompatibilities: 
      - EC2
      Volumes: 
      - 
        Name: docker-volume
        DockerVolumeConfiguration:
          Autoprovision: true
          Scope: shared


  JenkinsInstance:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: eu-west-1a
      IamInstanceProfile: !Ref EC2InstanceProfile
      ImageId: ami-0c5abd45f676aab4f
      SubnetId: !Ref Subnet
      InstanceType: t2.micro
      #KeyName: test
      SecurityGroupIds:
        - !Ref SecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=ci-cd-cluster >> /etc/ecs/ecs.config
      Volumes:
        - Device: /dev/sda2
          VolumeId: !Ref JenkinsVolume
      Tags:
        - Key: Name
          Value: jenkins-instance
    DependsOn: GatewayAttachement

  JenkinsVolume:
    Type: AWS::EC2::Volume
    Properties: 
      AvailabilityZone: eu-west-1a
      Size: 10

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: jenkins-ec2-instance
      Roles:
        - !Ref EC2Role

  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
            - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
        Version: 2012-10-17
      Path: /
      Policies:
      - PolicyName: connect-to-ecs
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: [
              "ecs:DeregisterContainerInstance",
              "ecs:DiscoverPollEndpoint",
              "ecs:Poll",
              "ecs:RegisterContainerInstance",
              "ecs:StartTelemetrySession",
              "ecs:Submit*",
              "ecr:GetAuthorizationToken",
              "ecr:BatchCheckLayerAvailability",
              "ecr:GetDownloadUrlForLayer",
              "ecr:BatchGetImage",
              "logs:CreateLogStream",
              "logs:PutLogEvents"
            ]
            Resource: '*'
